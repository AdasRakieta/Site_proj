class AutomationsManager{constructor(app){this.app=app;this.buttons=[];this.automations=[];this.globalClickListener=null;this.bindMethods();}
bindMethods(){this.createAutomation=this.createAutomation.bind(this);this.updateAutomation=this.updateAutomation.bind(this);this.deleteAutomation=this.deleteAutomation.bind(this);this.showAutomationForm=this.showAutomationForm.bind(this);this.initPage=this.initPage.bind(this);this.renderAutomations=this.renderAutomations.bind(this);this.onAutomationsUpdate=this.onAutomationsUpdate.bind(this);}
async initPage(){console.log('Inicjalizacja strony automatyzacji');try{await this.fetchInitialData();await this.loadAutomations();const addBtn=document.getElementById('new-automation');if(addBtn){addBtn.addEventListener('click',()=>this.showAutomationForm());}}catch(error){console.error('Błąd inicjalizacji strony automatyzacji:',error);this.app.showNotification('Błąd ładowania automatyzacji','error');}}
async fetchInitialData(){try{const buttonsData=await this.app.fetchData('/api/buttons');if(buttonsData&&Array.isArray(buttonsData)){this.buttons=buttonsData;return true;}
return false;}catch(error){console.error('Błąd ładowania przycisków:',error);return false;}}
async loadAutomations(){try{const timeoutPromise=new Promise((_,reject)=>{setTimeout(()=>reject(new Error('Timeout ładowania automatyzacji')),5000);});const response=await Promise.race([this.app.fetchData('/api/automations'),timeoutPromise]);this.automations=response;this.renderAutomations(response);}catch(error){console.error('Błąd ładowania automatyzacji:',error);this.renderAutomations([]);return false;}}
onAutomationsUpdate(data){console.log('Aktualizacja automatyzacji:',data);let automations=data;if(data&&typeof data==='object'&&!Array.isArray(data)){if(data.automations&&Array.isArray(data.automations)){automations=data.automations;console.log('Otrzymano aktualizację dla domu:',data.home_id);}}
if(Array.isArray(automations)){this.automations=automations;this.renderAutomations(automations);console.log(`Zaktualizowano ${automations.length}automatyzacji`);}else{console.warn('Nieprawidłowy format danych automatyzacji:',data);}}
renderAutomations(automations){const container=document.querySelector('.automations-container');if(!container)return;if(this.globalClickListener){document.removeEventListener('click',this.globalClickListener);}
let list=document.getElementById('automations-list');if(!list){list=this.app.createElement('div',{id:'automations-list'});container.appendChild(list);}
list.innerHTML='';const loader=document.getElementById('loading-indicator');if(loader)loader.style.display='none';if(!automations||automations.length===0){list.appendChild(this.app.createElement('p',{class:'no-automations',textContent:'Brak zdefiniowanych automatyzacji'}));return;}
automations.forEach((automation,index)=>{const automationElement=this.createAutomationCard(automation,index);list.appendChild(automationElement);});}
createAutomationCard(automation,index){const actionsContainer=this.app.createElement('div',{class:'automation-actions'});const editBtn=this.app.createElement('button',{class:'edit-automation btn-secondary',textContent:'Edytuj'});const deleteBtn=this.app.createElement('button',{class:'confirm-delete-btn','data-automation-index':index});const deleteBtnText=this.app.createElement('span',{textContent:'Usuń'});deleteBtn.appendChild(deleteBtnText);actionsContainer.appendChild(editBtn);actionsContainer.appendChild(deleteBtn);const automationElement=this.app.createElement('div',{class:'automation-card','data-index':index},[this.app.createElement('h3',{textContent:automation.name}),this.app.createElement('p',{textContent:`Wyzwalacz:${this.formatTrigger(automation.trigger)}`}),this.app.createElement('p',{textContent:`Akcje:${automation.actions.length}`}),this.app.createElement('div',{class:`status-badge ${automation.enabled?'enabled':'disabled'}`,textContent:automation.enabled?'Aktywna':'Nieaktywna'}),actionsContainer]);editBtn.addEventListener('click',(e)=>{e.stopPropagation();this.showAutomationForm(automation,index);});deleteBtn.addEventListener('click',async(e)=>{e.stopPropagation();if(deleteBtn.classList.contains('confirm-state')){deleteBtn.disabled=true;deleteBtnText.textContent='Usuwanie...';await this.deleteAutomation(index);deleteBtn.disabled=false;deleteBtnText.textContent='Usuń';deleteBtn.classList.remove('confirm-state');}else{deleteBtn.classList.add('confirm-state');deleteBtnText.textContent='✓ Potwierdź usunięcie';setTimeout(()=>{if(deleteBtn.classList.contains('confirm-state')){deleteBtn.classList.remove('confirm-state');deleteBtnText.textContent='Usuń';}},5000);}});return automationElement;}
setupGlobalClickListener(){}
formatTrigger(trigger){if(!trigger)return'Nieznany wyzwalacz';switch(trigger.type){case'time':if(Array.isArray(trigger.days)&&trigger.days.length>0){const dayLabels={mon:'Pn',tue:'Wt',wed:'Śr',thu:'Cz',fri:'Pt',sat:'Sb',sun:'Nd'};const daysStr=trigger.days.map(d=>dayLabels[d]||d).join(', ');return`W ${daysStr}o ${trigger.time}`;}else{return`Codziennie o ${trigger.time}`;}
case'device':const[room,device]=trigger.device.split('_');return`Gdy ${device}w ${room}jest ${trigger.state==='on'?'włączony':trigger.state==='off'?'wyłączony':'przełączony'}`;case'sensor':return`Gdy ${trigger.sensor}jest ${trigger.condition==='above'?'powyżej':'poniżej'}${trigger.value}°C`;default:return trigger.type;}}
showAutomationForm(automation=null,index=null){const formContainer=document.getElementById('automation-form-container')||this.app.createElement('div',{id:'automation-form-container'});formContainer.innerHTML=`<h3>${automation?'Edytuj automatyzację':'Nowa automatyzacja'}</h3><form id="automation-form"><div class="form-group"><label for="automation-name">Nazwa:</label><input type="text"id="automation-name"required
value="${automation?.name || ''}"></div><div class="form-group"><label>Wyzwalacz:</label><select id="trigger-type"><option value="time"${automation?.trigger?.type==='time'?'selected':''}>Czas</option><option value="device"${automation?.trigger?.type==='device'?'selected':''}>Urządzenie</option><option value="sensor"${automation?.trigger?.type==='sensor'?'selected':''}>Czujnik</option></select><div id="trigger-params"></div></div><div class="form-group"><label>Akcje:</label><div id="actions-container"></div><button type="button"id="add-action"class="btn-secondary">Dodaj akcję</button></div><div class="form-group"><label>Włącz automatyzację:</label><div class="center-container"><label class="switch"><input type="checkbox"id="automation-enabled"
${automation?.enabled?'checked':''}><span class="slider round"></span></label></div></div><div class="center-container"><div class="form-buttons"><button type="submit"class="btn-primary">Zapisz</button><button type="button"id="cancel-form"class="btn-secondary">Anuluj</button></div></div></form>`;document.querySelector('.automations-container').appendChild(formContainer);this.initFormEvents(formContainer,automation,index);if(automation){this.updateTriggerParams(formContainer,automation.trigger?.type||'time',automation.trigger);this.populateActions(formContainer,automation.actions);}else{this.updateTriggerParams(formContainer,'time');}}
initFormEvents(formContainer,automation,index){const form=formContainer.querySelector('#automation-form');if(!form)return;const triggerTypeSelect=form.querySelector('#trigger-type');if(triggerTypeSelect){triggerTypeSelect.addEventListener('change',(e)=>{this.updateTriggerParams(formContainer,e.target.value);});}
const addActionBtn=form.querySelector('#add-action');if(addActionBtn){addActionBtn.addEventListener('click',()=>{this.addActionToForm(formContainer,null);});}
const cancelBtn=form.querySelector('#cancel-form');if(cancelBtn){cancelBtn.addEventListener('click',()=>{formContainer.remove();});}
form.addEventListener('submit',async(e)=>{e.preventDefault();const automationData=this.getFormData(formContainer);try{if(index!==null){await this.updateAutomation(index,automationData);}else{await this.createAutomation(automationData);}
formContainer.remove();}catch(error){console.error('Błąd zapisywania automatyzacji:',error);}});}
updateTriggerParams(formContainer,triggerType,existingTrigger=null){const container=formContainer.querySelector('#trigger-params');if(!container)return;container.innerHTML='';let html='';switch(triggerType){case'time':const days=[{key:'mon',label:'Poniedziałek'},{key:'tue',label:'Wtorek'},{key:'wed',label:'Środa'},{key:'thu',label:'Czwartek'},{key:'fri',label:'Piątek'},{key:'sat',label:'Sobota'},{key:'sun',label:'Niedziela'}];let daysHtml='<div style="margin-top:20px;margin-bottom:10px;font-weight:bold;">Dni tygodnia:</div>';daysHtml+='<div class="weekdays-checkbox-group">';daysHtml+=`<svg class='inline-svg'><symbol id='check-4'viewBox='0 0 12 10'><polyline points='1.5 6 4.5 9 10.5 1'></polyline></symbol></svg>`;days.forEach((d,i)=>{const checked=existingTrigger?.days?.includes(d.key)?'checked':'';const id=`trigger-day-${d.key}`;daysHtml+=`<input class="weekday-checkbox-input trigger-day"id="${id}"type="checkbox"value="${d.key}"${checked}/><label class="weekday-checkbox-label"for="${id}"><span><svg width="12px"height="10px"><use xlink:href="#check-4"></use></svg></span><span>${d.label}</span></label>`;});daysHtml+='</div>';html=`<label for="trigger-time">Godzina:</label><input type="time"id="trigger-time"required value="${existingTrigger?.time || ''}">${daysHtml}`;break;case'device':html=`<label for="trigger-device">Urządzenie:</label><select id="trigger-device"required>${this.buttons.map(btn=>`<option value="${btn.room}_${btn.name}"
${existingTrigger?.device===`${btn.room}_${btn.name}`?'selected':''}>${btn.room}-${btn.name}</option>`).join('')}</select><label for="trigger-device-state">Stan:</label><select id="trigger-device-state"required><option value="on"${existingTrigger?.state==='on'?'selected':''}>Włączony</option><option value="off"${existingTrigger?.state==='off'?'selected':''}>Wyłączony</option><option value="toggle"${existingTrigger?.state==='toggle'?'selected':''}>Przełączenie</option></select>`;break;case'sensor':html=`<label for="trigger-sensor">Czujnik:</label><select id="trigger-sensor"required><option value="temperature"${existingTrigger?.sensor==='temperature'?'selected':''}>Temperatura</option><option value="humidity"${existingTrigger?.sensor==='humidity'?'selected':''}>Wilgotność</option></select><label for="trigger-sensor-value">Wartość:</label><input type="number"id="trigger-sensor-value"required value="${existingTrigger?.value || ''}"><select id="trigger-sensor-condition"><option value="above"${existingTrigger?.condition==='above'?'selected':''}>Powyżej</option><option value="below"${existingTrigger?.condition==='below'?'selected':''}>Poniżej</option></select>`;break;}
container.innerHTML=html;}
populateActions(formContainer,actions=[]){const container=formContainer.querySelector('#actions-container');if(!container)return;container.innerHTML='';actions.forEach(action=>{this.addActionToForm(formContainer,action);});}
addActionToForm(formContainer,existingAction=null){const container=formContainer.querySelector('#actions-container');if(!container)return;const actionIndex=container.children.length;const actionElement=this.app.createElement('div',{class:'action','data-index':actionIndex});const typeSelect=this.app.createElement('select',{class:'action-type',name:`actions[${actionIndex}][type]`},[this.app.createElement('option',{value:'device',textContent:'Urządzenie'}),this.app.createElement('option',{value:'notification',textContent:'Powiadomienie'})]);const paramsContainer=this.app.createElement('div',{class:'action-params'});const removeButton=this.app.createElement('button',{class:'remove-action',type:'button',textContent:'Usuń'});actionElement.appendChild(typeSelect);actionElement.appendChild(paramsContainer);actionElement.appendChild(removeButton);container.appendChild(actionElement);if(existingAction){typeSelect.value=existingAction.type;}
this.updateActionParams(actionElement,existingAction);typeSelect.addEventListener('change',()=>{this.updateActionParams(actionElement);});removeButton.addEventListener('click',()=>{actionElement.remove();this.renumberActions(formContainer);});}
renumberActions(formContainer){const container=formContainer.querySelector('#actions-container');if(!container)return;Array.from(container.children).forEach((actionElement,index)=>{actionElement.dataset.index=index;const typeSelect=actionElement.querySelector('.action-type');if(typeSelect){typeSelect.name=`actions[${index}][type]`;}
this.updateActionParams(actionElement);});}
updateActionParams(actionElement,existingAction=null){const paramsContainer=actionElement.querySelector('.action-params');if(!paramsContainer)return;const actionType=actionElement.querySelector('.action-type').value;const actionIndex=actionElement.dataset.index||0;paramsContainer.innerHTML='';switch(actionType){case'device':if(!this.buttons||this.buttons.length===0){paramsContainer.textContent='Brak dostępnych urządzeń';return;}
const deviceSelect=this.app.createElement('select',{class:'action-device',name:`actions[${actionIndex}][device]`,required:true});this.buttons.forEach(button=>{deviceSelect.appendChild(this.app.createElement('option',{value:`${button.room}_${button.name}`,textContent:`${button.room}-${button.name}`,selected:existingAction?.device===`${button.room}_${button.name}`}));});const stateSelect=this.app.createElement('select',{class:'action-device-state',name:`actions[${actionIndex}][state]`,required:true},[this.app.createElement('option',{value:'on',textContent:'Włącz',selected:existingAction?.state==='on'}),this.app.createElement('option',{value:'off',textContent:'Wyłącz',selected:existingAction?.state==='off'}),this.app.createElement('option',{value:'toggle',textContent:'Przełącz',selected:existingAction?.state==='toggle'})]);paramsContainer.appendChild(deviceSelect);paramsContainer.appendChild(stateSelect);break;case'notification':const messageInput=this.app.createElement('input',{type:'text',class:'action-notification-message',id:`action-notification-message-id`,name:`actions[${actionIndex}][message]`,placeholder:'Treść powiadomienia',value:existingAction?.message||'',required:true});paramsContainer.appendChild(messageInput);break;}}
getFormData(formContainer){const form=formContainer.querySelector('#automation-form');if(!form)throw new Error('Brak formularza automatyzacji');const query=(selector)=>form.querySelector(selector);const queryAll=(selector)=>Array.from(form.querySelectorAll(selector));const formData={name:query('#automation-name')?.value||'',trigger:{type:query('#trigger-type')?.value||'time'},actions:[],enabled:query('#automation-enabled')?.checked??false};switch(formData.trigger.type){case'time':formData.trigger.time=query('#trigger-time')?.value||'';formData.trigger.days=queryAll('.trigger-day:checked').map(cb=>cb.value);break;case'device':formData.trigger.device=query('#trigger-device')?.value||'';formData.trigger.state=query('#trigger-device-state')?.value||'';break;case'sensor':formData.trigger.sensor=query('#trigger-sensor')?.value||'';formData.trigger.value=parseFloat(query('#trigger-sensor-value')?.value||'0');formData.trigger.condition=query('#trigger-sensor-condition')?.value||'';break;}
queryAll('#actions-container .action').forEach(actionElement=>{const actionType=actionElement.querySelector('.action-type').value;const action={type:actionType};switch(actionType){case'device':action.device=actionElement.querySelector('.action-device').value;action.state=actionElement.querySelector('.action-device-state').value;break;case'notification':action.message=actionElement.querySelector('.action-notification-message').value;break;}
formData.actions.push(action);});return formData;}
async createAutomation(automationData){try{const response=await this.app.postData('/api/automations',automationData);if(response.status==='success'){this.app.showNotification('Automatyzacja została utworzona','success');return response;}else{this.app.showNotification(response.message||'Błąd podczas tworzenia automatyzacji','error');throw new Error(response.message||'Unknown error');}}catch(error){this.app.showNotification('Błąd podczas tworzenia automatyzacji: '+error.message,'error');throw error;}}
async updateAutomation(index,automationData){try{const response=await fetch(`/api/automations/${index}`,{method:'PUT',headers:{'Content-Type':'application/json','X-CSRFToken':getCSRFToken()},body:JSON.stringify(automationData),});if(!response.ok)throw new Error(`HTTP error!status:${response.status}`);const data=await response.json();if(data.status==='success'){this.app.showNotification('Automatyzacja została zaktualizowana','success');return data;}else{this.app.showNotification(data.message||'Błąd podczas aktualizacji automatyzacji','error');throw new Error(data.message||'Unknown error');}}catch(error){this.app.showNotification('Błąd podczas aktualizacji automatyzacji: '+error.message,'error');throw error;}}
async deleteAutomation(index){try{const response=await this.app.deleteData(`/api/automations/${index}`);if(response.status==='success'){this.app.showNotification('Automatyzacja została usunięta','success');}else{this.app.showNotification(response.message||'Błąd podczas usuwania automatyzacji','error');const card=document.querySelector(`.automation-card[data-index="${index}"]`);if(card){const container=card.querySelector('.delete-btn-container');container.querySelector('.delete-automation').classList.remove('hidden');container.querySelector('.confirm-delete-btn').classList.add('hidden');}}}catch(error){this.app.showNotification('Błąd podczas usuwania automatyzacji: '+error.message,'error');console.error('Błąd usuwania:',error);}}}
async function initAutomationsPage(){console.log('Inicjalizacja strony automatyzacji');const loader=document.getElementById('loading-indicator');try{if(window.app&&window.app.automations){await window.app.automations.initPage();if(loader)loader.style.display='none';window.app.socket.on('update_automations',(data)=>{window.app.automations.onAutomationsUpdate(data);});}else{console.error('Aplikacja nie została poprawnie zainicjalizowana');if(loader)loader.textContent='Błąd inicjalizacji aplikacji';}}catch(error){console.error('Błąd inicjalizacji strony:',error);if(loader){loader.textContent='Błąd ładowania automatyzacji';loader.style.color='red';}}}
document.addEventListener('DOMContentLoaded',function(){if(document.getElementById('automations-list')){initAutomationsPage();}});