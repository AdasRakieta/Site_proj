class SmartHomeApp{constructor(){console.log('Inicjalizacja SmartHomeApp');try{this.socket=typeof io!=='undefined'?io():{on:()=>console.warn('Socket.IO nie jest dostępny'),emit:()=>console.warn('Socket.IO nie jest dostępny'),disconnect:()=>{}};console.log('Socket.IO zainicjalizowany');}catch(error){console.error('Błąd inicjalizacji Socket.IO:',error);this.socket={on:()=>console.warn('Socket.IO nie jest dostępny (try-catch)'),emit:()=>console.warn('Socket.IO nie jest dostępny (try-catch)'),disconnect:()=>{}};}
this.automations=new AutomationsManager(this);this.initTheme();this.initMenu();this.bindSocketEvents();this.bindMenuEvents();this.map=null;this.mapInitialized=false;this.showNotification=this.showNotification.bind(this);this.rooms=null;console.log('SmartHomeApp gotowy');}
async fetchInitialData(){try{const buttonsData=await this.fetchData('/api/buttons');if(buttonsData&&Array.isArray(buttonsData)){this.buttons=buttonsData;}}catch(error){console.error('Błąd ładowania przycisków:',error);}}
async getRooms(force=false){if(!force&&Array.isArray(this.rooms)&&this.rooms.length>0){return this.rooms;}
try{const rooms=await this.fetchData('/api/rooms');if(Array.isArray(rooms)){this.rooms=rooms;return rooms;}
return[];}catch(e){return[];}}
initMap(){if(this.mapInitialized||!document.getElementById('map'))return;const homeCoords=[52.4012124,16.860299];const gymCoords=[52.39700434367431,16.859041122186433];const studyCoords=[52.408577733383154,16.89017620899486];const workCoords=[52.407238,16.7850388];this.map=L.map('map').setView(homeCoords,15);L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.map);L.marker(homeCoords).addTo(this.map).bindPopup("<b>Nasz dom</b>").openPopup();L.marker(gymCoords).addTo(this.map).bindPopup("<b>Nasza siłka</b>");L.marker(studyCoords).addTo(this.map).bindPopup("<b>Miejsce tortur 1.</b>");L.marker(workCoords).addTo(this.map).bindPopup("<b>Miejsce tortur 2.</b>");this.mapInitialized=true;}
toggleMap(){const mapContainer=document.getElementById('map-container');const toggleBtn=document.getElementById('toggleMap');if(!mapContainer||!toggleBtn)return;if(mapContainer.style.display==='none'){mapContainer.style.display='block';toggleBtn.textContent='Ukryj mapę';if(!this.mapInitialized){this.loadLeaflet().then(()=>this.initMap());}}else{mapContainer.style.display='none';toggleBtn.textContent='Pokaż mapę';}}
loadLeaflet(){return new Promise((resolve,reject)=>{if(typeof L!=='undefined'){resolve();return;}
const css=document.createElement('link');css.rel='stylesheet';css.href='https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';css.integrity='sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=';css.crossOrigin='';document.head.appendChild(css);const js=document.createElement('script');js.src='https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';js.integrity='sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';js.crossOrigin='';js.onload=resolve;js.onerror=reject;document.head.appendChild(js);});}
initTheme(){this.savedTheme=localStorage.getItem('theme')||'light';document.documentElement.setAttribute('data-theme',this.savedTheme);this.setInitialMenuIcons(this.savedTheme);this.updateMenuIcons(this.savedTheme);this.updateSideMenuIcons(this.savedTheme);}
setInitialMenuIcons(theme){const iconMap={'menu-icon':'menu_icon','menu-icon-side':'menu_icon','home-icon':'home_icon','lights-icon':'lights_icon','temperature-icon':'temperature_icon','security-icon':'security_icon','settings-icon':'settings_icon','dashboard-icon':'settings_icon','automations-icon':'automations_icon','edit-icon':'edit_icon','user-menu-settings-icon':'settings_icon','user-menu-user-icon':'user_icon'};Object.entries(iconMap).forEach(([id,name])=>{const el=document.getElementById(id);if(el){el.src=`/static/icons/${name}_${theme}.png`;}});}
changeTheme(theme){console.log('Zmiana motywu na:',theme);this.savedTheme=theme;document.documentElement.setAttribute('data-theme',theme);localStorage.setItem('theme',theme);this.updateMenuIcons(theme);this.updateSideMenuIcons(theme);}
updateMenuIcons(theme){const iconSrc=theme==='dark'?"/static/icons/menu_icon_dark.png":"/static/icons/menu_icon_light.png";[document.getElementById('menu-icon'),document.getElementById('menu-icon-side'),document.getElementById('menu-icon-header')].filter(Boolean).forEach(el=>el.src=iconSrc);}
updateSideMenuIcons(theme){const iconMap={'home-icon':'home_icon','lights-icon':'lights_icon','temperature-icon':'temperature_icon','security-icon':'security_icon','settings-icon':'settings_icon','dashboard-icon':'settings_icon','automations-icon':'automations_icon','edit-icon':'edit_icon','user-menu-settings-icon':'settings_icon','user-menu-user-icon':'user_icon'};Object.entries(iconMap).forEach(([id,name])=>{const element=document.getElementById(id);if(element){element.src=theme==='dark'?`/static/icons/${name}_dark.png`:`/static/icons/${name}_light.png`;}});} 
initMenu(){this.sideMenu=document.getElementById('sideMenu');if(this.sideMenu){this.sideMenu.style.left='-260px';this.sideMenu.style.transition='left 0.3s ease-in-out';}}
bindMenuEvents(){document.querySelectorAll('.close-btn').forEach(button=>{button.addEventListener('click',()=>this.toggleMenu());});const toggleMapBtn=document.getElementById('toggleMap');if(toggleMapBtn){toggleMapBtn.addEventListener('click',()=>this.toggleMap());}}
toggleMenu(){if(!this.sideMenu){console.warn('Menu boczne nie zostało znalezione');return;}
const isVisible=this.sideMenu.style.left==='0px';this.sideMenu.style.left=isVisible?'-260px':'0px';}
bindSocketEvents(){if(!this.socket){console.warn('Socket.IO nie jest dostępny - pomijanie bindSocketEvents');return;}
const events={'update_rooms':'onRoomsUpdate','update_buttons':'onButtonsUpdate','update_temperature_controls':'onTemperatureControlsUpdate','sync_button_states':'onButtonStatesSync','update_security_state':'onSecurityStateUpdate','update_automations':data=>this.automations.onAutomationsUpdate(data)};Object.entries(events).forEach(([event,handler])=>{this.socket.on(event,(data)=>{if(typeof handler==='function'){handler(data);}else if(this[handler]){this[handler](data);}else{console.warn(`Brak handlera dla eventu ${event}`);}});});this.socket.on('update_button',(data)=>{let switchId=`${data.room}_${data.name.replace(/\s+/g,'_')}Switch`;let switchElement=document.getElementById(switchId);if(!switchElement){switchId=`${data.name.replace(/\s+/g,'_')}Switch`;switchElement=document.getElementById(switchId);}
if(switchElement){switchElement.checked=data.state;}});this.socket.on('update_rooms',(rooms)=>{this.rooms=rooms;if(typeof this.onRoomsUpdate==='function'){this.onRoomsUpdate(rooms);}});}
async fetchData(url){try{const response=await fetch(url,{headers:{'X-CSRFToken':getCSRFToken()}});if(!response.ok)throw new Error(`HTTP error!status:${response.status}`);return await response.json();}catch(error){console.error('Błąd fetchData:',error);return{status:'error',message:error.message};}}
async postData(url,data){try{const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':getCSRFToken()},body:JSON.stringify(data),});if(!response.ok)throw new Error(`HTTP error!status:${response.status}`);return await response.json();}catch(error){console.error('Błąd postData:',error);return{status:'error',message:error.message};}}
async deleteData(url){try{const response=await fetch(url,{method:'DELETE',headers:{'X-CSRFToken':getCSRFToken()}});if(!response.ok)throw new Error(`HTTP error!status:${response.status}`);return await response.json();}catch(error){console.error('Błąd deleteData:',error);return{status:'error',message:error.message};}}
async putData(url,data){try{const response=await fetch(url,{method:'PUT',headers:{'Content-Type':'application/json','X-CSRFToken':getCSRFToken()},body:JSON.stringify(data),});if(!response.ok)throw new Error(`HTTP error!status:${response.status}`);return await response.json();}catch(error){console.error('Błąd putData:',error);return{status:'error',message:error.message};}}
createElement(tag,attributes={},children=[]){const element=document.createElement(tag);Object.entries(attributes).forEach(([key,value])=>{if(key==='class'){element.className=value;}else if(key==='textContent'){element.textContent=value;}else{element.setAttribute(key,value);}});children.forEach(child=>{if(typeof child==='string'){element.appendChild(document.createTextNode(child));}else{element.appendChild(child);}});return element;}
checkAuth(){this.socket.on('auth_required',()=>{window.location.href='/login';});}
disconnect(){if(this.socket&&this.socket.disconnect){this.socket.disconnect();}}
showNotification(message,type='info'){const container=document.getElementById('notifications-container')||document.body;const notification=document.createElement('div');notification.className=`notification ${type}`;notification.innerHTML=`<span>${message}</span><button class="notification-close"title="Zamknij">&times;</button>`;notification.style.opacity='0';notification.querySelector('.notification-close').onclick=()=>notification.remove();container.appendChild(notification);setTimeout(()=>{notification.style.opacity='1';},10);setTimeout(()=>{notification.style.opacity='0';setTimeout(()=>{notification.remove();},300);},5000);}}
function getCSRFToken(){let token=null;const input=document.querySelector('input[name="_csrf_token"]');if(input)token=input.value;if(!token&&window.csrf_token)token=window.csrf_token;return token;}
function showNotification(message,type='info'){const container=document.getElementById('notifications-container')||document.body;const notification=document.createElement('div');notification.className=`notification ${type}`;notification.innerHTML=`<span>${message}</span><button class="notification-close"title="Zamknij">&times;</button>`;notification.style.opacity='0';notification.querySelector('.notification-close').onclick=()=>notification.remove();container.appendChild(notification);setTimeout(()=>{notification.style.opacity='1';},10);setTimeout(()=>{notification.style.opacity='0';setTimeout(()=>{notification.remove();},300);},5000);}
window.showNotification=showNotification;window.updateRoomsAndButtonsList=function(rooms,buttons){const container=document.getElementById("roomsAndButtonsList");if(!container)return;container.innerHTML="";rooms.forEach((room)=>{const roomContainer=document.createElement("div");roomContainer.classList.add("lights-container");const roomHeader=document.createElement("h2");roomHeader.textContent=`${room}:`;roomContainer.appendChild(roomHeader);const buttonsContainer=document.createElement("div");buttonsContainer.classList.add("center-container");const roomButtons=buttons.filter(button=>button.room===room);roomButtons.forEach(button=>{const buttonName=document.createElement("div");buttonName.textContent=button.name;buttonName.className="light-button-label";buttonsContainer.appendChild(buttonName);const switchLabel=document.createElement("label");switchLabel.classList.add("switch");const switchInput=document.createElement("input");switchInput.type="checkbox";switchInput.id=`${room}_${button.name.replace(/\s+/g,'_')}Switch`;switchInput.checked=button.state;switchInput.addEventListener('change',function(){if(window.toggleLight)window.toggleLight(room,button.name,this.checked);});const switchSlider=document.createElement("span");switchSlider.classList.add("slider");switchLabel.appendChild(switchInput);switchLabel.appendChild(switchSlider);buttonsContainer.appendChild(switchLabel);});roomContainer.appendChild(buttonsContainer);container.appendChild(roomContainer);});};function initializeApp(){if(typeof io==='undefined'){console.warn('Socket.IO nie jest załadowany - ponawianie próby...');setTimeout(initializeApp,100);return;}
try{window.app=new SmartHomeApp();console.log('Aplikacja zainicjalizowana:',window.app);window.addEventListener('beforeunload',()=>{if(window.app){window.app.disconnect();}});if(typeof initPage==='function'){console.log('Wywołanie initPage');initPage();}}catch(error){console.error('Błąd inicjalizacji aplikacji:',error);}}
document.addEventListener('DOMContentLoaded',()=>{console.log('DOM załadowany - rozpoczynanie inicjalizacji');initializeApp();});