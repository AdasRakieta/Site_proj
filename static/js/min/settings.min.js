function showMessage(elementId,message,isError=false){showNotification(message,isError?'error':'success');const element=document.getElementById(elementId);if(element){element.textContent='';element.style.display='none';}}
function getCSRFToken(){let csrfToken=null;const input=document.querySelector('input[name="_csrf_token"]');if(input)csrfToken=input.value;if(!csrfToken){const meta=document.querySelector('meta[name="csrf-token"]');if(meta)csrfToken=meta.getAttribute('content');}
if(!csrfToken&&window.csrf_token)csrfToken=window.csrf_token;return csrfToken;}
function createConfirmButton(user_id,username,deleteBtn){const confirmBtn=document.createElement('button');confirmBtn.className='confirm-delete-btn';confirmBtn.textContent='Potwierdź';confirmBtn.dataset.userId=user_id;confirmBtn.dataset.username=username;deleteBtn.classList.add('hidden');confirmBtn.addEventListener('click',()=>{performUserDeletion(user_id,username);confirmBtn.remove();deleteBtn.classList.remove('hidden');});const timeoutId=setTimeout(()=>{if(confirmBtn.parentNode){confirmBtn.remove();deleteBtn.classList.remove('hidden');}},5000);confirmBtn.addEventListener('click',()=>clearTimeout(timeoutId));return confirmBtn;}
async function makeApiCall(url,options={}){const response=await fetch(url,{...options,headers:{'Content-Type':'application/json','X-CSRFToken':getCSRFToken(),...options.headers}});if(!response.ok){throw new Error(`HTTP ${response.status}:${response.statusText}`);}
return await response.json();}
function waitForApp(){return new Promise((resolve)=>{if(window.app){resolve(window.app);}else{const checkApp=()=>{if(window.app){resolve(window.app);}else{setTimeout(checkApp,100);}};checkApp();}});}
let notificationUsersList=[];async function loadUsers(){try{let response;if(window.app){response=await window.app.fetchData('/api/users');}else{response=await makeApiCall('/api/users');}
if(Array.isArray(response)){updateUsersTable(response);notificationUsersList=response;fillNotificationUserSelect();}else if(response.status==='error'){throw new Error(response.message);}else{throw new Error('Nieprawidłowy format odpowiedzi');}}catch(error){console.error('Błąd ładowania użytkowników:',error);showMessage('userActionMessage','Nie udało się załadować listy użytkowników: '+error.message,true);}}
function updateUsersTable(users){const tableBody=document.getElementById('usersTableBody');if(!tableBody)return;tableBody.innerHTML='';users.forEach(user=>{const row=document.createElement('tr');row.className='user-row';row.dataset.userId=user.user_id;row.dataset.editing='false';const usernameCell=document.createElement('td');usernameCell.className='username-cell';usernameCell.innerHTML=`<span class="display-value">${user.username}</span>`;row.appendChild(usernameCell);const emailCell=document.createElement('td');emailCell.className='email-cell';emailCell.innerHTML=`<span class="display-value">${user.email||''}</span>`;row.appendChild(emailCell);const roleCell=document.createElement('td');roleCell.className='role-cell';roleCell.innerHTML=`<span class="display-value">${user.role==='admin'?'Administrator':'Użytkownik'}</span>`;row.appendChild(roleCell);const passwordCell=document.createElement('td');passwordCell.className='password-cell';passwordCell.innerHTML=`<span class="display-value">${user.password||'••••••••'}</span>`;row.appendChild(passwordCell);const actionsCell=document.createElement('td');actionsCell.className='actions-cell';const actionsDiv=document.createElement('div');actionsDiv.className='action-buttons';const editBtn=document.createElement('button');editBtn.className='icon-button edit-button';editBtn.innerHTML='✏️';editBtn.title='Edytuj';editBtn.addEventListener('click',()=>toggleEditMode(row));actionsDiv.appendChild(editBtn);if(user.role!=='admin'){const deleteBtn=document.createElement('button');deleteBtn.className='icon-button delete-button';deleteBtn.innerHTML='✕';deleteBtn.title='Usuń';deleteBtn.addEventListener('click',(e)=>deleteUser(user.user_id,user.username,e));actionsDiv.appendChild(deleteBtn);}
actionsCell.appendChild(actionsDiv);row.appendChild(actionsCell);tableBody.appendChild(row);});}
function toggleEditMode(row){const isEditing=row.dataset.editing==='true';const userId=row.dataset.userId;if(isEditing){exitEditMode(row);}else{enterEditMode(row);}}
function enterEditMode(row){row.dataset.editing='true';const usernameSpan=row.querySelector('.username-cell .display-value');const emailSpan=row.querySelector('.email-cell .display-value');const roleSpan=row.querySelector('.role-cell .display-value');const currentUsername=usernameSpan.textContent;const currentEmail=emailSpan.textContent;const currentRole=roleSpan.textContent==='Administrator'?'admin':'user';usernameSpan.innerHTML=`<input type="text"class="edit-input"data-field="username"value="${currentUsername}"/>`;emailSpan.innerHTML=`<input type="email"class="edit-input"data-field="email"value="${currentEmail}"/>`;roleSpan.innerHTML=`<select class="edit-input"data-field="role"><option value="user"${currentRole==='user'?'selected':''}>Użytkownik</option><option value="admin"${currentRole==='admin'?'selected':''}>Administrator</option></select>`;const editBtn=row.querySelector('.edit-button');const deleteBtn=row.querySelector('.delete-button');if(editBtn){editBtn.innerHTML='✓';editBtn.title='Potwierdź';editBtn.className='icon-button confirm-button';const newEditBtn=editBtn.cloneNode(true);editBtn.parentNode.replaceChild(newEditBtn,editBtn);newEditBtn.addEventListener('click',()=>saveEditedUser(row));}
if(deleteBtn){deleteBtn.innerHTML='✕';deleteBtn.title='Anuluj';deleteBtn.className='icon-button cancel-button';const newDeleteBtn=deleteBtn.cloneNode(true);deleteBtn.parentNode.replaceChild(newDeleteBtn,deleteBtn);newDeleteBtn.addEventListener('click',()=>exitEditMode(row));}}
function exitEditMode(row){row.dataset.editing='false';const userId=row.dataset.userId;const usernameSpan=row.querySelector('.username-cell .display-value');const emailSpan=row.querySelector('.email-cell .display-value');const roleSpan=row.querySelector('.role-cell .display-value');const usernameInput=row.querySelector('.username-cell .edit-input');const emailInput=row.querySelector('.email-cell .edit-input');const roleSelect=row.querySelector('.role-cell .edit-input');loadUsers();}
async function saveEditedUser(row){const userId=row.dataset.userId;const inputs=row.querySelectorAll('.edit-input');const updates={};inputs.forEach(input=>{const field=input.dataset.field;const value=input.value.trim();if(field==='username'){if(value.length<3){showNotification('Nazwa użytkownika musi mieć co najmniej 3 znaki','error');return;}
updates.username=value;}else if(field==='email'){if(value&&!value.includes('@')){showNotification('Podaj poprawny adres email','error');return;}
updates.email=value;}else if(field==='role'){updates.role=value;}});try{const response=await fetch(`/api/users/${userId}`,{method:'PUT',headers:{'Content-Type':'application/json','X-CSRFToken':getCSRFToken()},body:JSON.stringify(updates)});const data=await response.json();if(!response.ok)throw new Error(data.message||'Nieznany błąd');showNotification('Dane użytkownika zostały zaktualizowane','success');loadUsers();}catch(error){showNotification(`Nie udało się zaktualizować użytkownika:${error.message}`,'error');}}
function deleteUser(user_id,username,event){if(!user_id||!username)return;const deleteBtn=event.target;const actionsDiv=deleteBtn.parentNode;const confirmBtn=createConfirmButton(user_id,username,deleteBtn);actionsDiv.appendChild(confirmBtn);}
async function performUserDeletion(user_id,username){try{let response;if(window.app){response=await window.app.deleteData(`/api/users/${user_id}`);}else{response=await makeApiCall(`/api/users/${user_id}`,{method:'DELETE'});}
if(response.status==='success'){showMessage('userActionMessage',`Użytkownik ${username}został usunięty`);showNotification(`Użytkownik ${username}został usunięty`,'success');loadUsers();}else{throw new Error(response.message||'Nieznany błąd');}}catch(error){console.error('Błąd usuwania użytkownika:',error);showMessage('userActionMessage',`Nie udało się usunąć użytkownika:${error.message}`,true);showNotification(`Nie udało się usunąć użytkownika:${error.message}`,'error');}}
let notificationRecipients=[];function createConfirmRemoveRecipientButton(idx,removeBtn){const confirmBtn=document.createElement('button');confirmBtn.className='confirm-delete-btn';confirmBtn.textContent='Potwierdź';confirmBtn.dataset.idx=idx;removeBtn.classList.add('hidden');confirmBtn.addEventListener('click',async()=>{notificationRecipients.splice(idx,1);await saveNotificationRecipientsOnly();await loadNotificationSettings();showNotification('Odbiorca został usunięty','success');confirmBtn.remove();removeBtn.classList.remove('hidden');});const timeoutId=setTimeout(()=>{if(confirmBtn.parentNode){confirmBtn.remove();removeBtn.classList.remove('hidden');}},5000);confirmBtn.addEventListener('click',()=>clearTimeout(timeoutId));return confirmBtn;}
function renderNotificationRecipients(){const tableBody=document.getElementById('notificationRecipientsTableBody');tableBody.innerHTML='';if(notificationRecipients.length===0){const row=document.createElement('tr');row.className='no-recipients-row';const cell=document.createElement('td');cell.colSpan=4;cell.style.color='#888';cell.textContent='Brak dodatkowych odbiorców';row.appendChild(cell);tableBody.appendChild(row);return;}
notificationRecipients.forEach((recipient,idx)=>{const row=document.createElement('tr');const emailCell=document.createElement('td');emailCell.textContent=recipient.email||'';row.appendChild(emailCell);const userCell=document.createElement('td');userCell.textContent=recipient.user||'';row.appendChild(userCell);const notifyCell=document.createElement('td');const notifyLabel=document.createElement('label');notifyLabel.className='checkbox-notification-label';notifyLabel.style.display='flex';notifyLabel.style.alignItems='center';notifyLabel.style.justifyContent='center';notifyLabel.style.gap='6px';const notifyCheckbox=document.createElement('input');notifyCheckbox.type='checkbox';notifyCheckbox.className='checkbox-notification';notifyCheckbox.checked=recipient.enabled===undefined?true:!!recipient.enabled;notifyCheckbox.addEventListener('change',async()=>{notificationRecipients[idx].enabled=notifyCheckbox.checked;await saveNotificationRecipientsOnly();});const customSpan=document.createElement('span');customSpan.className='checkbox-notification-custom';customSpan.innerHTML='<svg viewBox="0 0 13 10"><polyline points="1 5.5 5 9 12 1"></polyline></svg>';const textSpan=document.createElement('span');textSpan.className='checkbox-notification-text';textSpan.textContent='Włącz powiadomienia';notifyLabel.appendChild(notifyCheckbox);notifyLabel.appendChild(customSpan);notifyLabel.appendChild(textSpan);notifyCell.appendChild(notifyLabel);row.appendChild(notifyCell);const actionCell=document.createElement('td');const removeBtn=document.createElement('button');removeBtn.textContent='Usuń';removeBtn.className='delete-button';removeBtn.addEventListener('click',()=>{const confirmBtn=createConfirmRemoveRecipientButton(idx,removeBtn);actionCell.appendChild(confirmBtn);});actionCell.appendChild(removeBtn);row.appendChild(actionCell);tableBody.appendChild(row);});}
function getAddRecipientEnabledValue(){const el=document.getElementById('notificationRecipientEnabled');return el?el.checked:true;}
async function fillNotificationUserSelect(){try{let users;if(window.app){users=await window.app.fetchData('/api/users');}else{users=await makeApiCall('/api/users');}
const select=document.getElementById('notificationRecipientUser');if(select){select.innerHTML='';users.forEach(user=>{const option=document.createElement('option');option.value=user.username;option.textContent=user.username;select.appendChild(option);});}}catch(e){}}
document.addEventListener('DOMContentLoaded',()=>{const addBtn=document.getElementById('addNotificationRecipientBtn');if(addBtn){addBtn.addEventListener('click',async()=>{const email=document.getElementById('notificationRecipientEmail').value.trim();const user=document.getElementById('notificationRecipientUser').value;const enabled=getAddRecipientEnabledValue();if(!email||!user)return;if(notificationRecipients.some(r=>r.email===email&&r.user===user))return;notificationRecipients.push({email,user,enabled});document.getElementById('notificationRecipientEmail').value='';renderNotificationRecipients();await saveNotificationRecipientsOnly();await loadNotificationSettings();showNotification('Odbiorca został dodany','success');});}
loadNotificationSettings();fillNotificationUserSelect();});async function loadNotificationSettings(){try{let response;if(window.app){response=await window.app.fetchData('/api/notifications/settings');}else{response=await makeApiCall('/api/notifications/settings');}
if(Array.isArray(response.recipients)){notificationRecipients=response.recipients;renderNotificationRecipients();}
if(notificationRecipients.length>0){document.getElementById('notificationRecipientEmail').value=notificationRecipients[notificationRecipients.length-1].email;document.getElementById('notificationRecipientUser').value=notificationRecipients[notificationRecipients.length-1].user;}}catch(error){showMessage('notificationsMessage','Nie udało się pobrać ustawień powiadomień',true);}}
async function saveNotificationSettings(){try{let response;if(window.app){response=await window.app.postData('/api/notifications/settings',{recipients:notificationRecipients});}else{response=await makeApiCall('/api/notifications/settings',{method:'POST',body:JSON.stringify({recipients:notificationRecipients})});}
if(response.status==='success'){showMessage('notificationsMessage','Ustawienia powiadomień zapisane');}else{throw new Error(response.message||'Nieznany błąd');}}catch(error){showMessage('notificationsMessage','Błąd zapisu ustawień powiadomień: '+error.message,true);}}
async function saveNotificationRecipientsOnly(){try{let response;if(window.app){response=await window.app.postData('/api/notifications/settings',{recipients:notificationRecipients});}else{response=await makeApiCall('/api/notifications/settings',{method:'POST',body:JSON.stringify({recipients:notificationRecipients})});}
if(response.status!=='success'){throw new Error(response.message||'Nieznany błąd');}}catch(error){showMessage('notificationsMessage','Błąd zapisu odbiorców powiadomień: '+error.message,true);}}
function initNotificationSettings(){if(window.sessionRole==='admin'){const saveBtn=document.getElementById('saveNotificationsBtn');if(saveBtn){saveBtn.addEventListener('click',saveNotificationSettings);}
loadNotificationSettings();}}
function initSettingsPage(){const themeSelect=document.querySelector('.theme-selector select');if(themeSelect){themeSelect.value=localStorage.getItem('theme')||'light';}
if(window.sessionRole==='admin'){loadUsers();initNotificationSettings();}}
document.addEventListener('DOMContentLoaded',()=>{initSettingsPage();const userForm=document.querySelector('.user-form form');if(userForm){userForm.addEventListener('submit',async(e)=>{e.preventDefault();await addUser();});}});